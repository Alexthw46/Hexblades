//file:noinspection GroovyAssignabilityCheck
buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven {
            name "Sponge"
            url "https://repo.spongepowered.org/repository/maven-public/"
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }

}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mc_version}-${mod_version}"
group = 'alexthw.hexblades'
archivesBaseName = project.mod_id

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets{
    main.resources.srcDirs += 'src/main/generated_resources'
}

minecraft {

    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'parchment', version: '2021.10.17-1.16.5'

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            arg "-mixin.config=hexblades.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                hexblades {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            arg "-mixin.config=hexblades.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"


            mods {
                hexblades {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'hexblades', '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/')

            mods {
                hexblades {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources{
    srcDir 'src/generated/resources'
}

repositories {
    flatDir {
        dirs 'externalmods'
    }
    mavenCentral()
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven { url 'https://maven.blamejared.com' }

    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }

    maven { url "https://nexus.resourcefulbees.com/repository/maven-public/" }

    maven {
        name 'JEI maven'
        url = "https://dvs1.progwml6.com/files/maven"
    }
}

dependencies {

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.0'

    //compats
    implementation fg.deobf("vazkii.botania:Botania:1.16.5-420")
    implementation fg.deobf("curse.maven:malum-484064:3374475") //0.3
    implementation fg.deobf("curse.maven:ars_nouveau-401955:3576193")//1.24.10

    compileOnly fg.deobf("curse.maven:druidcraft-340991:3507029")//0.4.54
    compileOnly fg.deobf("curse.maven:occultism-361026:3574677") //1.23.6

    //dependencies
    implementation fg.deobf("elucent:eidolon:0.2.7")
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.55')
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.5.3")
    implementation fg.deobf('mezz.jei:jei-1.16.5:7.7.1.136')

    //testers
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-53.1")
    //runtimeOnly fg.deobf("curse.maven:druidcraft-340991:3507029")
    //runtimeOnly fg.deobf("curse.maven:occultism-361026:3574677")
    runtimeOnly fg.deobf("curse.maven:exp-407174:3188120")  // Shutup experimental settings
    //runtimeOnly fg.deobf("com.telepathicgrunt:Blame:1.16.5-3.2.0-forge")

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "hexblades",
                "Specification-Vendor"    : "hexblades",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "hexblades",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {

        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "hexblades.refmap.json"
}